#!/usr/bin/env perl
############################################################################           
#  Licensed to the Apache Software Foundation (ASF) under one or more                  
#  contributor license agreements.  See the NOTICE file distributed with               
#  this work for additional information regarding copyright ownership.                 
#  The ASF licenses this file to You under the Apache License, Version 2.0             
#  (the "License"); you may not use this file except in compliance with                
#  the License.  You may obtain a copy of the License at                               
#                                                                                      
#      http://www.apache.org/licenses/LICENSE-2.0                                      
#                                                                                      
#  Unless required by applicable law or agreed to in writing, software                 
#  distributed under the License is distributed on an "AS IS" BASIS,                   
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.            
#  See the License for the specific language governing permissions and                 
#  limitations under the License.                                                      
                                                                                       
###############################################################################
# Nightly tests for pig.
#
#

#PigSetup::setup();

$cfg = {
	'driver' => 'Pig',
    'execonly' => 'mapred,tez',

	'groups' => [
		{
		'name' => 'HCatDDL',
		'tests' => [
			{
			'num' => 1,
			'java_params' => ['-Dhcat.bin=:HCATBIN:'],
			'pig' => q\sql drop table if exists pig_hcat_ddl_1;
sql create table pig_hcat_ddl_1(name string,
age int,
gpa double)
stored as textfile;\,
                        'rc' => 0
			},
			{
			'num' => 2,
			'java_params' => ['-Dhcat.bin=:HCATBIN:'],
			'pig' => q\a = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
sql drop table if exists pig_hcat_ddl_1;
sql create table pig_hcat_ddl_1(name string,
age int,
gpa double)
stored as textfile;
store a into ':OUTPATH:';\,
                        'verify_pig_script' => q\a = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
store a into ':OUTPATH:';\,
			},
		]
		},
		{
		'name' => 'pigHiveInterop',
		'tests' => [
		    {
			'num' => 1,
			'java_params' => ['-Dhcat.bin=:HCATBIN: -Dpig.additional.jars=:HIVEHOME:/lib/hive-exec.jar,HIVEHOME:/lib/hive-metastore.jar,HIVEHOME:/lib/hcatalog-core.jar,HIVEHOME:/lib/hcatalog-pig-adapter.jar,HIVEHOME:/lib/libfb303.jar.HIVEHOME:/auxlib/jdo-api-3.0.1.jar -Dmapreduce.job.queuename=grideng'],
			'pig' => q\a = load ':INPATHPIG:/singlefile/studentnulltab10k' as (name, age, gpa);
store a into ':ORCOUT:/student_null_tab_orc' using OrcStorage();

sql create database hivedb location '/user/hadoopqa/hivedb';
sql use hivedb;drop table if exists pig_student_null_tab;
sql use hivedb;create table pig_student_null_tab(name string,
age int,
gpa float)
partitioned by (inputfrom string)
stored as orc tblproperties("orc.compress"="ZLIB");

store a into 'hivedb.pig_student_null_tab using org.apache.hive.hcatalog.pig.HCatStorer('inputfrom=pig');
b = load ':ORCOUT:/student_null_tab_orc' using OrcStorage();
store b into 'hivedb.pig_student_null_tab' using org.apache.hive.hcatalog.pig.HCatStorer('inputfrom=orc');
c = load 'hivedb.pig_student_null_tab' using using org.apache.hive.hcatalog.pig.HCatLoader();
d = filter c by inputfrom==pig;
store d into ':ORCOUT:/student_null_tab_orc_from_hive' using OrcStorage();\,
            'rc' => 0
			},
			{
			'num' => 2,
			'java_params' => ['-Dhcat.bin=:HCATBIN: -Dpig.additional.jars=:HIVEHOME:/lib/hive-exec.jar,HIVEHOME:/lib/hive-metastore.jar,HIVEHOME:/lib/hcatalog-core.jar,HIVEHOME:/lib/hcatalog-pig-adapter.jar,HIVEHOME:/lib/libfb303.jar.HIVEHOME:/auxlib/jdo-api-3.0.1.jar -Dmapreduce.job.queuename=grideng'],
			'pig' => q\a = load ':INPATHPIG:/singlefile/studentcomplextab10k' as (nameagegpamap:map[], nameagegpatuple:tuple(tname:chararray, tage:int, tgpa:float), nameagegpabag:bag{t:tuple(bname:chararray, bage:int, bgpa:float)}, nameagegpamap_name:chararray, nameagegpamap_age:int, nameagegpamap_gpa:float);
store a into ':ORCOUT:/student_complex_tab_orc' using OrcStorage();

sql create database if not exists hivedb location '/user/hadoopqa/hivedb';
sql use hivedb;drop table if exists pig_student_complex_tab;
sql use hivedb;create table pig_student_complex_tab (
nameagegpamap MAP<STRING, BINARY>,
nameagegpatuple STRUCT<tname:STRING, tage:INT, tgpa:FLOAT>,
nameagegpabag ARRAY<STRUCT<bname:STRING, bage:INT, bgpa:FLOAT>>,
nameagegpamap_name varchar(500),
nameagegpamap_age int,
nameagegpamap_gpa float)
partitioned by (inputfrom string)
row format delimited fields terminated by '\t'
map keys terminated by '#'
stored as orc tblproperties("orc.compress"="ZLIB");

store a into 'hivedb.pig_student_complex_tab using org.apache.hive.hcatalog.pig.HCatStorer('inputfrom=pig');
b = load ':ORCOUT:/student_complex_tab_orc' using OrcStorage();
store b into 'hivedb.pig_student_complex_tab' using org.apache.hive.hcatalog.pig.HCatStorer('inputfrom=orc');
c = load 'hivedb.pig_student_complex_tab' using using org.apache.hive.hcatalog.pig.HCatLoader();
d = filter c by inputfrom==pig;
store d into ':ORCOUT:/student_complex_tab_orc_from_hive' using OrcStorage();\,
            'rc' => 0
			},
			{
			'num' => 3,
			'java_params' => ['-Dhcat.bin=:HCATBIN: -Dpig.additional.jars=:HIVEHOME:/lib/hive-exec.jar,HIVEHOME:/lib/hive-metastore.jar,HIVEHOME:/lib/hcatalog-core.jar,HIVEHOME:/lib/hcatalog-pig-adapter.jar,HIVEHOME:/lib/libfb303.jar.HIVEHOME:/auxlib/jdo-api-3.0.1.jar -Dmapreduce.job.queuename=grideng'],
			'pig' => q\a = load ':INPATHPIG:/singlefile/studentnulltab10k' as (name, age, gpa);
store a into ':ORCOUT:/student_null_tab_orc' using OrcStorage();

sql create database if not exists hivedb location '/user/hadoopqa/hivedb';
sql use hivedb;drop table if exists pig_student_null_tab;
sql use hivedb;create table pig_student_null_tab(name string,
age int,
gpa float)
stored as orc tblproperties("orc.compress"="ZLIB");
sql set mapreduce.job.queuename=grideng;use hivedb;load data inpath :INPATHHIVE: into table pig_student_null_tab;

b = load ':ORCOUT:/student_null_tab_orc' using OrcStorage();
c = load 'hivedb.pig_student_null_tab' using org.apache.hive.hcatalog.pig.HCatLoader();
d = join B by name, C by name;
e = group D by (B::gpa);
f = foreach E generate group as grp, B::name;
g = order F by grp;
h = limit G 1000;
store H into 'join_orc_hcat_primitive' using OrcStorage();
J = load 'join_orc_hcat_primitive' using OrcStorage();
store J into ':OUTPATH:';\,
            'verify_pig_script' => q\a = load ':INPATHPIG:/singlefile/studentnulltab10k' as (name, age, gpa);
b = load ':INPATHPIG:/singlefile/studentnulltab10k' as (name, age, gpa);
c = join A by name, B by name;
d = group c by (A::gpa);
e = foreach d generate group as grp, A::name;
f = order e by grp;
g = limit f 1000;
store f into ':OUTPATH:';\,

//hdfs -copyToLocal both o/p and diff??

            'rc' => 0
			},
			{
			'num' => 4,
			'java_params' => ['-Dhcat.bin=:HCATBIN: -Dpig.additional.jars=:HIVEHOME:/lib/hive-exec.jar,HIVEHOME:/lib/hive-metastore.jar,HIVEHOME:/lib/hcatalog-core.jar,HIVEHOME:/lib/hcatalog-pig-adapter.jar,HIVEHOME:/lib/libfb303.jar.HIVEHOME:/auxlib/jdo-api-3.0.1.jar -Dmapreduce.job.queuename=grideng'],
			'pig' => q\a = load ':INPATHPIG:/singlefile/studentcomplextab10k' as (nameagegpamap:map[], nameagegpatuple:tuple(tname:chararray, tage:int, tgpa:float), nameagegpabag:bag{t:tuple(bname:chararray, bage:int, bgpa:float)}, nameagegpamap_name:chararray, nameagegpamap_age:int, nameagegpamap_gpa:float);
store a into ':ORCOUT:/student_complex_tab_orc' using OrcStorage();

sql create database if not exists hivedb location '/user/hadoopqa/hivedb';
sql use hivedb;create table if not exists pig_student_complex_tab (
nameagegpamap MAP<STRING, BINARY>,
nameagegpatuple STRUCT<tname:STRING, tage:INT, tgpa:FLOAT>,
nameagegpabag ARRAY<STRUCT<bname:STRING, bage:INT, bgpa:FLOAT>>,
nameagegpamap_name varchar(500),
nameagegpamap_age int,
nameagegpamap_gpa float)
partitioned by (inputfrom string)
row format delimited fields terminated by '\t'
map keys terminated by '#'
stored as orc tblproperties("orc.compress"="ZLIB");
sql set mapreduce.job.queuename=grideng;use hivedb;load data inpath :INPATHHIVECOMPLEX: into table pig_student_complex_tab;

b = load ':ORCOUT:/student_complex_tab_orc' using OrcStorage();
c = load 'hivedb.pig_student_complex_tab' using org.apache.hive.hcatalog.pig.HCatLoader();
d = foreach b generate (chararray)nameagegpamap#'name' as name, nameagegpamap#'age' as age, nameagegpamap#'gpa' as gpa, nameagegpatuple.tage as tage, FLATTEN(nameagegpabag) as (bname, bage, bgpa);
e = join D by name, C by name;
f = group E by (D::gpa);
g = foreach F generate group as grp, D::tage;
h = order G by grp;
j = limit H 1000;
store J into 'join_orc_hcat_complex' using OrcStorage();
k = load 'join_orc_hcat_complex' using OrcStorage();
store k into ':OUTPATH:';\,
            'verify_pig_script' => q\a = load ':INPATHPIG:/singlefile/studentcomplextab10k' as (nameagegpamap:map[], nameagegpatuple:tuple(tname:chararray, tage:int, tgpa:float), nameagegpabag:bag{t:tuple(bname:chararray, bage:int, bgpa:float)}, nameagegpamap_name:chararray, nameagegpamap_age:int, nameagegpamap_gpa:float);
b = load ':INPATHPIG:/singlefile/studentcomplextab10k' as (nameagegpamap:map[], nameagegpatuple:tuple(tname:chararray, tage:int, tgpa:float), nameagegpabag:bag{t:tuple(bname:chararray, bage:int, bgpa:float)}, nameagegpamap_name:chararray, nameagegpamap_age:int, nameagegpamap_gpa:float);
c = join A by nameagegpamap#'name', B by nameagegpamap#'name';
d = group c by (A::bgpa);
e = foreach D generate group as grp, A::tage;
f = order E by grp;
g = limit F 1000;
store F into ':OUTPATH:';\,

//hdfs -copyToLocal both o/p and diff??

            'rc' => 0
			},
	]
}
;



